name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CONAN_REVISIONS_ENABLED: 1

jobs:
  build:
    strategy:
      matrix:
        # os: [ubuntu-latest, windows-latest]
        os: [ubuntu-latest]
        build_type: [Release]
        include:
            # Ubuntu ANY
          - os: ubuntu-latest
            ubuntu: true
            home: /home/runner
            latest_conan_hash: 4ec98f84f49f3be2312287af1b4a1bb81fce2e009b9139810a71418f50728f09
          #   # Windows ANY
          # - os: windows-latest
          #   windows: true
          #   home: C:/Users/runneradmin
          #   latest_conan_hash: 19f147f67d264bc0b4034be035e3e6de8be3196f217c58eafd9cf09b2dca7c53
          #   # Ubuntu Release
          - os: ubuntu-latest
            build_type: Release
            conan_profile: default
            cpack_generator: TGZ
          #   # Windows Release
          # - os: windows-latest
          #   build_type: Release
          #   conan_profile: default
          #   cpack_generator: ZIP

    env:
      BUILD_TYPE: ${{ matrix.build_type }}

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
         submodules: true

    - name: Conanfile hash
      run: |
        echo ${{ hashFiles('conanfile.txt') }}
        echo ${{ matrix.latest_conan_hash }}
    - name: GCC 11
      if: ${{ matrix.ubuntu }}
      run: |
        sudo apt install g++-11 libcap-dev -y
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 90
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 90
        sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-11 90 
    - name: Conan output
      run: |
        import os
        dirname = os.path.join('build', 'conan')
        os.makedirs(dirname, exist_ok=True)
        print('>>>', os.getcwd(), '::', dirname, '::', os.path.isdir(dirname))
      shell: python

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main

    - name: Configure Conan
      run: |
        conan profile new default --detect
        conan remote add mbits-conan https://mbits.jfrog.io/artifactory/api/conan/mbits-conan
        conan user -p ${{ secrets.JFROG_KEY }} -r mbits-conan ${{ secrets.JFROG_USER }}
    - name: Configure Conan (GCC C++11 library)
      if: ${{ matrix.ubuntu }}
      run: |
        conan profile update settings.compiler.libcxx=libstdc++11 default
    - name: Configure Conan (MSVC/MD)
      if: ${{ matrix.windows }}
      run: |
        conan profile update settings.compiler.runtime=MD default

    - name: Conan cache
      uses: actions/cache@v3
      id: cache
      with:
        path: ${{ matrix.home }}/.conan/data
        key: ${{ matrix.os }}-${{ matrix.build_type }}-${{ hashFiles('conanfile.txt') }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.latest_conan_hash }}

    - name: Get Conan packages
      working-directory: ${{github.workspace}}/build/conan
      run: conan install ../.. --build missing -pr:b=${{matrix.conan_profile}} -pr:h=${{matrix.conan_profile}}

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/build/conan/conan_toolchain.cmake -DCMAKE_POLICY_DEFAULT_CMP0091=NEW

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Pack
      if: ${{ matrix.cpack_generator != '' }}
      working-directory: ${{github.workspace}}/build
      run: cpack -G ${{ matrix.cpack_generator }}

    - name: Upload packages
      uses: actions/upload-artifact@v3
      if: ${{ matrix.cpack_generator != '' }}
      with:
        name: Packages
        path: ${{github.workspace}}/build/packages/movies-*
