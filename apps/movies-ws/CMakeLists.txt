set(MODS)
set(IMPORTS)
set(CALLS)

foreach(MOD ${PLUGINS})
    list(APPEND MODS "plugin-${MOD}")
    list(APPEND IMPORTS "\tplugin::ptr plugin_${MOD}()")
    list(APPEND CALLS "\t\t    plugin_${MOD},\n")
endforeach()

string(REPLACE ";" "" CALLS "${CALLS}")
string(REPLACE ";" ";\n" IMPORTS "${IMPORTS}")
file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/src/plugin_load_plugins.cc" "// THIS FILE IS AUTOGENERATED\n"
    "\n"
    "#include <array>\n"
    "#include <vector>\n"
    "#include <server/plugin.hh>\n"
    "\n"
    "namespace movies {\n"
    "${IMPORTS};\n"
    "\n"
    "\tplugin::list plugin::load_plugins() {\n"
    "\t\tstatic constexpr std::array loaders = {\n"
    "${CALLS}"
    "\t\t};\n"
    "\n"
	"\t\tplugin::list result{};\n"
	"\t\tresult.reserve(loaders.size());\n"
	"\t\tfor (auto loader : loaders)\n"
	"\t\t\tresult.push_back(loader());\n"
	"\t\treturn result;\n"
    "\t};\n"
    "}  // namespace movies")

message(STATUS "MODS: ${MODS}")

set(PROJECT_SOURCES
    src/main.cc
    src/service.cc
    src/service.hh
)

if (WIN32)
    list(APPEND PROJECT_SOURCES
        win32/movies-ws.rc
        win32/movies-ws.ico
        )
endif()
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${PROJECT_SOURCES})
source_group(TREE ${CMAKE_CURRENT_BINARY_DIR} FILES "${CMAKE_CURRENT_BINARY_DIR}/src/plugin_load_plugins.cc")
list(APPEND PROJECT_SOURCES ${QM_FILES})

add_executable(movies-ws ${PROJECT_SOURCES} "${CMAKE_CURRENT_BINARY_DIR}/src/plugin_load_plugins.cc")

target_link_libraries(movies-ws PRIVATE mbits::args websocket server startup ${MODS})
target_include_directories(movies-ws PRIVATE ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/src)
target_compile_options(movies-ws PRIVATE ${ADDITIONAL_WALL_FLAGS})
install(TARGETS movies-ws)
